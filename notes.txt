Oracle Problem:
cant read or listen data from real world

Oracle: any device that interacts with offchain worldto provide external data or computaion to smart contracts

Hybrid Smart Contracts: decentralized network + decentralized Oracle, have some offchain component

Chainlink, decent oracle networks

Concept          ||      Access      || pub or pvt
mnemonic         ||  All accounts    || pvt
pvt key          ||  1 account       || pvt
public address   ||  none            || public


struct (new)
usage:     People public person = People({favoriteNumber:2, name:"Jane"});

    struct People{
        uint256 favoriteNumber;
        string name;
    }
note: fav gets indexed to 0 and name  to 1,wheneevr obj like this, automatically indexed

red error not compiled
yellow warning compiled

calldata temp non-modifiable
memory temp modifiable
storage perm modifiable

choose test net and then go to chain.link to get test eth for the test net, then change iin the remix to inject and connect and deploy


side note: metamasl can be connected through rainbow wallet
no resource for metamask to next

Overriding functions 
when inherit in another contract and want function with same name to override parent contract ka functiin
1.virtual overriding: add "virtual" to parent function and override to child function

payable function fund
"// set minimum fund amount in usd
        require(msg.value > 1e18, "didnt send enough");"

reverting 
unda an action

// blockchains have no idea whats outside the chain, cant access api etc blah blah
called the ORACLE PROBLEM/ SMART CONTRACT CONNECTIVITY PROBLEM

Blockchain Oracle: an device interactiong with off chain world to get data
cant have 1 central oracle cause not decentralized

Chainlink, modular decentralized oracle network, can be customised

blockchain nodes cant make https or api calls

Chainlink Features:
    Chainlink data feeds: 
        chainlink nodes get data from diff exchanges and data providers
        get that data through network of decentral chainlink nodes
        nodes use meduim to figure out actual price of asset
        then deliver to reference/ pricefeed/ data contract on chain that other smart contracts can use
        then the smart contracts use that info to power thier defi app
    Chainlink VRF: (verifiable randomness function)
    Chainlink Keepers:
        decentralized event driven execution
        listen for event then execute

4.3
Interface is a skeleton of the contract, gives info on fuction but not the body

4.5
DECIMALS WITH MONEY
msg.value : 
    in terms of WEI
    18 decimals needed to be ether
    msg.value / 10^18 = ether
AggregatorV3 latestRoundData:
    8 decimals needed to be usd
    price / 10^8 = usd


4.7
LIBRARIES
    - Cant have state variables, cant send ether
    - all functions internal
    - library LibName{}
    - ` import "./LibName.sol"; `
    - inside contract ` using LibName for uint256; `
    - variable.LibFuncName();

4.8
SAFEMATH
    -need for version 0.7.6 and below
    -after sol mai hi aagya
    -unchecked is used when old way ki tarah act karwana chahate hai
    -unchecked is better for gas price so if youre sure of no over/underflows so use unchecked
 
 4.9
LOOPS
    -same

4.10
RESET AN array
    -just redeclare
    -arrName = new uint[](0);

4.11
SENDING ETH FROM CONTRACT
    - 3 ways, transfer (max 2300 gas), send (max 2300 gas), call (all gas)
    - Transfer: ` payable(msg.sender).transfer(address(this).balance); `
    - if transfer fails, throws error, automatically reverts
    - Send: ` bool sendSuccess = payable(msg.sender).send(address(this).balance);
              require(sendSuccess, "Send Failed");
            `
    - if send fails, returns bool, reverts with the require statement
    - Call: ` (bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value : address(this).balance}("")
              require(callSuccess, "Call Failed");
            `
    - if call, returns 2 params, bool and bytes onject that is arrays, bytes gives data since we can call any func from "call"

4.12
CONSTRUCTOR
    - gets called immediety as contract is created

4.13
MODIFIER
    - do whats in modifier then do rest where _; is

4.14
TESTNET Demoing
    - used sepolia
    - can add and then connect new account

4.15
ADVANCED SOLIDITY CONCEPTS
---

4.16
IMMUTIBILITY AND CONSTANT
    - one time set constants can be efficiented to save gas
    - Constant : makes the var a Constant
                    ` uint256 public constant VAR_NAME = 50; `
                    ` constants have all caps w/t _ naming convention `
    - Immutable : makes var contant but when set different than declare
                    uint public immutable i_varName;
                    ` i_varName = 30; `
                    ` i_ naminv convention `

4.17
CUSTOM ERRORS
    - create a custom error instead of using require
    - the output string uses alot of gas since each letter stored individually
    - ` error ErrName(); `
    - ` if(b==0) { revert ErrName();} `

4.18
RECIEVE and FALLBACKS
    - if someone sends eth without calling fund function
    - Recieve: pre existing special function that is called when eth is sent
        contract can have at most one, must have external and payable,
        cant return anything, n0 fiunction keyword
    - FallBack: 
        contract can have at most one, must have external payable or (bytes calldata input) external [payable] returns byte memory
        can be virtual, have modifiers

5.09
COMPILING OUR SOLIDITY
    - we use a js function (example here deploy.js)
    - tool solc-js
    - to set up
        ` yarn add solc `
        ` yarn add solc@0.8.7-fixed `
        ` yarn global add solc@0.8.7-fixed `
    - to compile
        ` yarn solcjs --bin --abi --include-path node-modules/ --base-path . -o . SimpleStorage.sol `
        --bin binary
        --abi abi
        --base-path .  means base path is current folder
        -o .  means we will output the current binary and abi to this folder

5.10
GANACHE and NETWORKS
    -rps : pemote procedure call
        connects us to make api calls and interact with blockchain node
    
5.11
INTRODUCTION TO ETHERS.JS
    - contract factory is something used to deploy contracts
    - what we did to deploy:
        gnache local blockchain
        used the rpc server id to connect using ethers and JsonRpcProvider
        added the pvt key of the wallet that will be deploying
        added abi and binay file of the contract to be deployed
        contract factoried it with abi binary and wallet params

5.12
AWAIT keyword
    - inside async function to wait for a promise to finish

5.13
ADDING TRANSACTION OVERRIDES
    - can add paras to deploy function to override stuff 
    - example: gasPrice:1000000000, gasLimit etc
    -   const contract = await contractFactory.deploy({ gasPrice:100000000});

5.14
TRANSACTION RECEIPTS
    - can wait a certain number of blocks to make sure it gets attachec with the chain
    - were essentially waiting for number of confirmations ie blocks
    - const deploymentReceipt = await contract.deployTransaction.wait(2); //2 blocks
    - so it gives all info on the contract 
    - transactionReceipt vs deployTransaction
    - after block, just contract before block

5.15
SENDING A RAW TRANSACTION IN ETHERSJS
    - we can create a contract ourselves just by specifying raw data of the transaction ourselves
    - differentnonce for every transaction,  number associated with a unique transaction
    - nonce is used in two diffferent contexts but mean the same, ie a number which is only used once
    -  ` const tx = {
    nonce: 3,
    gasPrice: "20000000000",
    gasLimit: 1000000,
    to: null,
    value: 0,
    //binary wali file the .bin, it tells this contract ko karo here simpleStorage.sol
    data: "0x608060405234801561001057600080fd5b506107a6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec114610067578063471f7cdf146100855780636057361d146100a35780636f760f41146100bf5780638bab8dd5146100db5780639e7a13ad1461010b575b600080fd5b61006f61013c565b60405161007c919061055f565b60405180910390f35b61008d610145565b60405161009a919061055f565b60405180910390f35b6100bd60048036038101906100b891906104a2565b61014b565b005b6100d960048036038101906100d49190610446565b610155565b005b6100f560048036038101906100f091906103fd565b6101eb565b604051610102919061055f565b60405180910390f35b610125600480360381019061012091906104a2565b610219565b60405161013392919061057a565b60405180910390f35b60008054905090565b60005481565b8060008190555050565b6000604051806040016040528083815260200184815250905060028190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101c09291906102d5565b505050816001846040516101d49190610548565b908152602001604051809103902081905550505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6002818154811061022957600080fd5b906000526020600020906002020160009150905080600001549080600101805461025290610673565b80601f016020809104026020016040519081016040528092919081815260200182805461027e90610673565b80156102cb5780601f106102a0576101008083540402835291602001916102cb565b820191906000526020600020905b8154815290600101906020018083116102ae57829003601f168201915b5050505050905082565b8280546102e190610673565b90600052602060002090601f016020900481019282610303576000855561034a565b82601f1061031c57805160ff191683800117855561034a565b8280016001018555821561034a579182015b8281111561034957825182559160200191906001019061032e565b5b509050610357919061035b565b5090565b5b8082111561037457600081600090555060010161035c565b5090565b600061038b610386846105cf565b6105aa565b9050828152602081018484840111156103a7576103a6610739565b5b6103b2848285610631565b509392505050565b600082601f8301126103cf576103ce610734565b5b81356103df848260208601610378565b91505092915050565b6000813590506103f781610759565b92915050565b60006020828403121561041357610412610743565b5b600082013567ffffffffffffffff8111156104315761043061073e565b5b61043d848285016103ba565b91505092915050565b6000806040838503121561045d5761045c610743565b5b600083013567ffffffffffffffff81111561047b5761047a61073e565b5b610487858286016103ba565b9250506020610498858286016103e8565b9150509250929050565b6000602082840312156104b8576104b7610743565b5b60006104c6848285016103e8565b91505092915050565b60006104da82610600565b6104e4818561060b565b93506104f4818560208601610640565b6104fd81610748565b840191505092915050565b600061051382610600565b61051d818561061c565b935061052d818560208601610640565b80840191505092915050565b61054281610627565b82525050565b60006105548284610508565b915081905092915050565b60006020820190506105746000830184610539565b92915050565b600060408201905061058f6000830185610539565b81810360208301526105a181846104cf565b90509392505050565b60006105b46105c5565b90506105c082826106a5565b919050565b6000604051905090565b600067ffffffffffffffff8211156105ea576105e9610705565b5b6105f382610748565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561065e578082015181840152602081019050610643565b8381111561066d576000848401525b50505050565b6000600282049050600182168061068b57607f821691505b6020821081141561069f5761069e6106d6565b5b50919050565b6106ae82610748565b810181811067ffffffffffffffff821117156106cd576106cc610705565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61076281610627565b811461076d57600080fd5b5056fea26469706673582212209e44527c6ec8930e7a5ae6edce1a7693c46b146a024dae06760f149ee6c81f5e64736f6c63430008070033",
    chainId: 5777,
    }; `
    - every chain has a unique chain id
    - after sending detail we also need someone to sign the transaction 
    - const signedTxResponse = await wallet.signTransaction(tx);
    - gives only signed transaction doesnt send transaction, no block created
    - we can call transaction count to always get correct nonce
        ` const nonce = await wallet.getTransactionCount(); `
    - data we sent was binary of creating a trasaction normally if were calling a functionetc uska alag data jayega

5.16
ITERACTING WITH CONTRACTS IN ETHERJS
    - ABI: application bionary interface, kinda like json of the smart contract
    - STEPS:
        * "HTTP://127.0.0.1:7545" //get the chain
        * get wallet
        * get abi in a var
        * get bin in a var
        * Create contract factory object using abi and bin and connecting to the wallet
        * deploy the contract
        * wait for deployed contract to confirm and come on a block
        * do whatever functions necesarry
    - BigNumber Lib
        used cause sol and js have issues with decimals
        if BigNumber output can add var.toString(); at end to convert to string
    - for view funtion no gas cost so its not a transaction we dont need to wait for a block to approve so trans reciept isnt used
    - for updation function gas costs so we need a block to accept it before we move forward

5.17
ENVIRONMENT VARS
    - Terminal
        ` echo $varName ` //gives env var value
        ` export varName = value ` //sets env var
    - .env file
        VAR_NAME = xyzvalue //declare
        process.env.VAR_NAME //call
    - Encrypt the pvt key before .env file for further protection
        new file encryptKey.js created, same structure of file
        in main, create wallet with pvt key first
        `  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY); `
        ` const encryptedJsonKey = await wallet.encrypt(
            process.env.PRIVATE_KEY_PASSWORD,
            process.env.PRIVATE_KEY
        ); `
        //we put the password in .env file too
        new file storing the encryptedJsonKey
        ` fs.writeFileSync("./.encryptedKey.json", encryptedJsonKey); `
    - now to get wallet
        ` const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
            let wallet = new ethers.Wallet.fromEncryptedJsonSync( //used let instead of const cause now have to connect to provider, before it was automatic
                encryptedJson,
                process.env.PRIVATE_KEY_PASSWORD
            ); 
              wallet = await wallet.connect(provider);
        `
        make sure to declare PRIVATE_KEY_PASSWORD in terminal
            PRIVATE_KEY_PASSWORD-password deploy node.js
    - ` history ` kets you see terminal history

5.18
CUSTOM PRETTIER
    - yard add prettier-plugin-solidity
    - .prettierrc file created with custom shiz
    - this takes precedent over other files
    - other: cmd shift v for priview mode of .md files

5.19
DEPLOYING TO A TESTNET OR MAINNET
    - Alchemy makes us a node to use on a test net
    - we use the http endpoint given there
    - adding our pvt key from sepolia test net wala test account
    - after deploying we can search the contract address on sepolia to see it yayyyy

5.20
VERIFYING ON BLOCK EXPLORERS
    - on etherscan we can verify and public our code
    - decompiling fromt he button takes time
    - enter details relevant to your contract
    - copy paste your contract code
    - mempool is waiting room on alchemy



6 HARDHAT SIMPLE STORAGE
harhat can be used as and instead of vs code?

6.00
    - hardhat is a Dev environment
    - everything you can do in hardhat is called a task
    - can package them into plugins that can be imported to another project
    - hardhat has many range plugins ex: web3.js ethers.js
    - we prefer using
        ` yarn --dev hardhart `
        as dependencies are required to run your project while devdependencies are only required to develop
    - when we reach front end then well install more packages but odnt need on dev stage
    - Create: ` yarn init `
        ` yarn --dev hardhart `
        ` yarn hardhat `
    - some npm packages have an @ sign at start,
        these are called "scoped packages"
        helps organizations amke clear which packages are official and whoch are not
        eg: everything by @ensdomains is by ens domains
            anything by @nomiclabs is by hard hat etc
    - what is in the pre installed structure?
        * contracts folder with a basic contract "Lock.sol"
        * node_modules
        * scripts folder with all deploying intracting with contracts scripts here
        * test folder
        * .gitignore
        * harhat.config.js , entry point for all scripts we write
        * package.json
        * readme
        * yarn.json

6.01
HARDHAT SETUP TROUBLE SHOOTING
    - if there is ahrdhat.config.js in a higher level folder yarn hardhat will give commands and not setup
    - to find this file ` npx hardhat --verbose ` will tell where it is then you can delete it

6.02
HARDHAT SET UP CONTINUED
    - What are some things we can do with hardhat
        * hardhat account (?)
        * yarn hardhat compile, compile normally
            1. cache folder, quick way to access sol files
            2. artifacts folder, contains info about our compiled code
                build info, info about compiled contract
                contracts, more compiled info

6.03
DEPLOYING SIMPLESTORAGE FROM HARDHAT
    - sol compiler version can be changed in hardhat.config.js
    - to compile we run ` yarn hardhat compile `
    - hardhat has its own ethers that we can use
    - hardhat ka ethers has contract and the deployment info, normal ethers doesnt
    - ` async function main() {
            const SimpleStorageFactory = await ethers.getContractFactory("SimpleStorage");
            console.log("Deploying contract...");
            const simpleStorage = await SimpleStorageFactory.deploy();
            // await simpleStorage.deployed();
            console.log(`Deployed Contract to ${simpleStorage.target}`)
        }           
    `
    - old version we await for deployed but new version we dont await we just type target instead of address for the address of the deployed contract

6.04
NETWORKS IN HARDHAT
    - there is a fake hardhat network
    - whenever we do a command we use this fake hardhat network
    - this comes with a private key, rpc url and fake blockchain
    - we can explicitly default network using hardhat.config.js
    - using ` defaultNetwork: "hardhat" `
    - can explicitly say which network using cli too
        `yarn hardhat run scripts/deploy.js --network hardhat `
    - makes it easy to change chains and networks fast
    - we can add network by hardhart.config.js by telling exactly how to connect to sepolia 
        ` networks: {
                sepolia:{
                    url: SEPOLIA_RPC_URL,
                    accounts: [PRIVATE_KEY], 
                    chainId: 11155111
                },
        } `
        * create env file and add link to the alchemy project https wala and your pvt key, can add chainid too

[NOTE: make sure to yarn add --dev dotenv when using env file
        and manually require("dotenv").config() in your hardhat.config]

6.05
PROGRAMMATIC VERIFICATION
    - we can add code in deploy script to automatically verify 
    - verify function has a contract address and args, args is for if contract has constructor
    - we can use etherscan tutorial but hardhat is better
    - hardhat has many nomic labs made plugins, well use the @nomiclabs/hardhat-etherscan plugin
    - installed using ` yarn add --dev @nomiclabs/hardhat-etherscan `
    - need api key to use, whicvh is like a key allowing to use etherscan ka api
    - add it in the hardhat.config file
    - new version has the verify plugin for etherscan built in the toolbox, no need for apiu key and plugin
    - `async function verify(contractAddress, args) {
        // works for etherscan only
        console.log("Verifying...")
        await run("verify:verify", {
            // subtask args
            address: contractAddress,
            constructorArguments: args,
        })
    } `
    - most common error is the contract is already verified so we put a check for that
    - a hardhat network contract doesnt need to be verified cause local to our machine
    - so we check to see if live network by importing network and chdecking chainID
        if yes then we put the verify function
    - we also wait a couple of blocks to be added tot the chain before verifying

[NOTE: can se network info by clging network.config]

6.06
INTERACTING WITH CONTRACTS IN HARDHAT
    - same code as before in deploy js

6.07
ARTIFACTS TROUBLESHOOTING
    - error shows no such file or directory, meaning code didnt compile correctly
    - we delete the artifacts and cache folder
    - then we rerun so hardhat wil auto compile if no artifacts

6.08
CUSTOM HARDHAT TASKS
    - we know hardhat has tasks we saw through yarn hardhat and verify was one of them
    - we know we can add tasks using plugins
    - we can also Custom Tasks
    - can directly define in hardhat.config.js
    - conventionally folder named tasks
    - Steps: 
        * tasks folder -> task-name.js
        * import the task function
        * define task name and description
        * can then pass params and action defines what the task wil actually do 
        * we pass args and hre, 
            HRE- hardhat runtime environment, hre can access what hardhat can
            hence hre.ethers
        * add file to config by require
        * (make sure the task fiel is exporting)
    - scripts and tasks are pretty similar, both can iteract, deploy

6.09
HARDHAT LOCALHOST NODE
    - everytime we run on hardhat network it re starts that why block number 0, hence we cant really interact
    - by doing ` yarn hardhat node` we can spinup a node thats work like ganache but in out terminal
    - this loacally created is using hardhat environment but not the same as hardhat network
    - we interact with this new network by creating in config, localhost, same chainid as hardhat
    - dont need to add acounts cause automatically gave us 10 fake accounts

6.10
HARDHAT CONSOLE
    - hardhat has a javascript console to interact with things
        `yard hardhat console --network localhost `
    - we can do everything we wanna do in deployjs here 

6.11
RUNNING TESTS
    - we can delete artifacts and cache by running ` yarn hardhat clean ` too
    - rekt.news shows prev contracts that got hacked and how
    - hardhat testing works with the mocha framework
    - test -> test-deploy.js
    - describe function takes string as name and a function
    - before each tells us what we'll do before each it
    - describes can be nested
    - deploy in a beforeeach first 
    - the it takes a string definign whats hould happen and a fucntion carrying it out
    - assert and expect from a package preinstalled called chai
    - eg for assert ` assert.equal(currentValue.toString(), expectedValue); `
        eg for expect `  expect(currentValue.toString().to.equal(expectedValue)); `

    - can run one out of 100 tests by using
        `yarn hardhat text --grep keywordofstring `

6.12
HARDHAT GAS REPORTER
    - best plugin extentiomn ius hardhat-gas-reporter
    - intall with ` yarn hardhat-gas-reporter --dev `
    - we add require in config file
    - we add     
        ` gasReporter: {
            enabled: true,
        }, `
    in the module.exports of config
    - now running test will poutput it to terminal
    - BUT we add
        `
        outputFile: "gas-reports.txt",
        noColors: true,
        currency: "USD",
        coinmarketcap: COINMARKETCAP_API_KEY,
        `
    - enables output in a text file, and converts to usd we use coinmarketcap api to convert to usd
    - we can also choose which chain to deploy to by specifying
        ` token: "MATIC" `

    - other: we add an or to where out env vars are called in the config file so it isnt undefined ever and throw an error

6.13
SOLIDITY COVERAGE
    - solidity coverage is a tool for ensuring safety of contract 
    - checks how many lines of code arent covered by tests
    - we install by 
        ` yarn add --dev solidity-coverage `
    - add require file and run yarn hardhat coverage
    - creates a coverage folder with lots of info and a file giving the info

6.14
WAFFLE
    - its a tool for smar contract testing
    - now we get a toolbox pre installed but not a waffle


7.00
HARDHAT FUND ME
    - about git etc

7.01
HARDHAT SETUP
    - new folder
    - add `yarn add --dev hardhat `
    - then run ` yarn hardhat `
    - used to have the advance project template, doesnt now
    - eslint is used to test code 